@function contrast($color) {
    @if (lightness($color) > 50) {
        @return #000000; // Lighter backgorund, return dark color
    } @else {
        @return #ffffff; // Darker background, return light color
    }
}

@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

$breakpoint-names: (
    'mobile',
    'phablet',
    'tablet',
    'desktop',
    'hd',
    'ultra'
)
!default;
$breakpoints: (
    'mobile': 400px,
    'phablet': 550px,
    'tablet': 750px,
    'desktop': 950px,
    'hd': 1175px,
    'ultra': 1600px
)
!default;
@mixin media($min: false, $max: false, $and: false, $feature: width, $type: all) {
    $min-width: 0;
    $max-width: 0;
    $query: ''; // FROM: this breakpoint (inclusive)
    @if $min {
        $min-width: map_get($breakpoints, $min);
    }
    // TO: that breakpoint (exclusive)
    @if $max {
        $max-width: map_get($breakpoints, $max) - 1px;
    }
    @if $feature {
        @if $min-width !=0 {
            $query: '#{$query} and (min-#{$feature}: #{$min-width})';
        }
        @if $max-width !=0 {
            $query: '#{$query} and (max-#{$feature}: #{$max-width})';
        }
    }
    @if $and {
        $query: '#{$query} and #{$and}';
    }
    // Remove unnecessary media query prefix 'all and '
    @if ($type=='all' and $query !='') {
        $type: '';
        $query: str-slice(unquote($query), 6);
    }
    @media #{$type + $query} {
        @content;
    }
}
@mixin pseudo($display: block, $pos: absolute, $content: ' ') {
    content: $content;
    display: $display;
    position: $pos;
}
@mixin truncate($truncation-boundary: 100%) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}


@mixin placeholder {
    &.placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }
}

@mixin triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction==down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round($size / 2.5);
    } @else
    if $direction==up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round($size / 2.5);
    } @else
    if $direction==right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else
    if $direction==left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}
// clearfix
@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    // background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@mixin linear-gradient-border($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    border-image: linear-gradient($direction, $color-stops);
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

@mixin pseudo-x ($element: '::after') {
    &#{$element} {
        @include pseudo;
        position: relative;
        content: "\d7";
        font-size: 2em;
        line-height: .5em;
        @content;
    }
}

@mixin pseudo-icon ($element: '::after') {
    &#{$element} {
        @include pseudo;
        @content;
    }
}

@mixin pseudo-arrow ($element: '::after') {
    &#{$element} {
        @include pseudo;
        height: .8rem;
        width: .8rem;
        margin: -.4rem;
        box-sizing: border-box;
        background: #fff;
        transform: rotate(45deg);
        z-index: 0;
        @content;
	}
}



@mixin chevron ($element: '::after') {
    content: '';
    vertical-align: middle;
    position: relative;
    font-size: 1em;
    height: .65em;
    width: .65em;
    border: 2px solid;
    color: inherit;
    display: inline-block;
    top: -.05em;
    transform: rotate(45deg);
    box-sizing: border-box;
    @if ($element == '::after') {
        margin-left: .3em;
    }
    @if ($element == '::before') {
        margin-right: .3em;
    }

}

@mixin chevron-left ($element: '::after') {
    &#{$element} {
        @include chevron($element);
        content: "";
        border-right: 0;
        border-top: 0;
        @content;
    }
}

@mixin chevron-right ($element: '::after') {

    &#{$element} {
        @include chevron($element);
        @content;
        border-left: 0;
        border-bottom: 0;
    }
}

@mixin chevron-up ($element: '::after') {
    &#{$element} {
        @include chevron($element);
        @if ($element == '::after') {
            margin-left: .5em;
        }
        @if ($element == '::before') {
            margin-right: .5em;
        }
        border-bottom: 0;
        border-right: 0;
        top: .1em;

        @content;
    }
}

@mixin chevron-down ($element: '::after') {
    &#{$element} {
        @include chevron($element);
        @if ($element == '::after') {
            margin-left: .5em;
        }
        @if ($element == '::before') {
            margin-right: .5em;
        }
        border-top: 0;
        border-left: 0;
        top: -.3em;

        @content;
    }
}


@mixin button-gradient($color: $green) {
    $bg: lighten($color,4%);
    $bg: adjust-hue($bg, -7);
    $blend: lighten($color,10%);
    $blend: adjust-hue($blend, 7);
    @include linear-gradient(120deg, $bg, $blend);
}

@mixin button-gradient-hover($color: $green) {
    $bg: lighten($color,10%);
    $bg: adjust-hue($bg, -6);
    $blend: lighten($color,17%);
    $blend: adjust-hue($blend, 6);
    @include linear-gradient(120deg, $bg, $blend);
}

@mixin button($color: $green, $text: false, $hover: true) {

    $text-color: contrast($color);

    @if $text {
        $text-color: $text;
    }

    $text-color: fade-out($text-color, .1);
    font-size: .9em;
    color: $text-color !important;
    text-align: center;
    text-transform: uppercase;
    text-decoration: none !important;
    font-weight: 600;
    vertical-align: middle;
    padding: .75em 1.5em;
    border-radius: 2em;
    border: 0 !important;
    transition: .2s $cubic-bezier;
    cursor: pointer;
    box-sizing: border-box;
    white-space: nowrap;
    line-height: 1em;
    display: inline-block;

    @include button-gradient( $color );
    @include soft-shadow;
    @if $hover {

        &:hover {
            @include media('desktop') {
                transform:  scale(1.03) translateY(-3%);
                box-shadow: 0 1rem .6rem -.8rem rgba(0,0,0,.05);
                @include button-gradient-hover($color);
            }
        }

    }
}

