@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}
	@return $string;
}

@function str-to-list($string, $separator: " ", $startAt: 1) {
	$workStr: str-slice($string, $startAt);
	$list: ();
	$indexOfFirstSeparator: str-index($workStr, $separator);
	@if $indexOfFirstSeparator == null {
		$list: ($workStr);
	} @else {
		$list: (str-slice($workStr, 1, $indexOfFirstSeparator - 1));
		$list: join(
			$list,
			str-to-list($workStr, $startAt: $indexOfFirstSeparator + 1)
		);
	}
	@return $list;
}

@mixin register($map) {
	// boolean flag for what classnames to generate
	$responsive: map-get($map, "responsive");
	$hover: map-get($map, "hover");
	$pseudo: map-get($map, "pseudo");
	$print: map-get($map, "print");

	// class definitions
	$definitions: map-get($map, "definitions");

	@each $name, $properties in $definitions {
		$classname: #{$name};
		$registry: registerClass($classname, $properties);

		@if $responsive {
			$registry: registerClass($classname, $properties, "responsive");
		}

		@if $hover {
			$registry: registerClass($classname, $properties, "hover");
		}

		@if $pseudo {
			$registry: registerClass($classname, $properties, "pseudo");
		}

		@if $print {
			$registry: registerClass($classname, $properties, "print");
		}
	}

	// register responsive variants
	@if $responsive {
		@each $breakpoint, $size in $breakpoints {
			@each $name, $properties in $definitions {
				$classname: #{$breakpoint}\: #{$name};

				$registry: registerVariation("responsive", $classname);
			}
		}
	}
}

// add a single classname and properties
@function registerClass($name, $propeties, $set: "default") {
	// import into the default registry
	$registryDefault: map-get($registrySets, $set);
	$registryDefault: map-merge($registryDefault, (#{$name}: $propeties));

	$registrySets: map-merge(
		$registrySets,
		(
			$set: $registryDefault,
		)
	) !global;

	@return $registryDefault;
}

@function createDefinitions(
	$property,
	$values,
	$prefix,
	$responsive: true,
	$hover: true,
	$pseudo: true,
	$print: true
) {
	$definitions: ();

	@each $name, $value in $values {
		$definitions: map-merge(
			$definitions, (
				#{$prefix}#{$name}: (
					#{$property}: #{$value},
				),
			)
		);
	}
	@return ($definitions);
}

// iterate through registered classes (map) and output the CSS
@mixin build() {
	@include buildDefault(map-get($registrySets, "default"));
	@include buildResponsive(map-get($registrySets, "responsive"));
	@include buildHover(map-get($registrySets, "hover"));
	@include buildPseudo(map-get($registrySets, "pseudo"));
	@include buildPrint(map-get($registrySets, "print"));
}

@mixin buildDefault($registry) {
	@each $classname, $properties in $registry {
		.#{$classname} {
			@each $property, $value in $properties {
				#{$property}: $value;
			}
		}
	}
}

@mixin buildResponsive($registry) {
	@each $breakpoint, $size in $breakpoints {
		@each $classname, $properties in $registry {
			.#{$breakpoint}\:#{$classname} {
				@include media($breakpoint) {
					@each $property, $value in $properties {
						#{$property}: $value;
					}
				}
			}
		}
	}
}

@mixin buildHover($registry) {
	// build grouped over states
	@each $name, $properties in $registry {
		$classname: #{$name};
		@if $build {
			.hover-group:hover .hover-group\:#{$classname} {
				@each $property, $value in $properties {
					#{$property}: $value;
				}
			}
		}
	}

	// build direct hovers after so they can override
	@each $name, $properties in $registry {
		$classname: #{$name};
		@if $build {
			.hover\:#{$classname}:hover {
				@each $property, $value in $properties {
					#{$property}: $value;
				}
			}
		}
	}
}

@mixin buildPrint($registry) {
	// build direct hovers after so they can override
	@each $classname, $properties in $registry {
		.print\:#{$classname}:hover {
			@media print {
				@each $property, $value in $properties {
					#{$property}: $value;
				}
			}
		}
	}
}
@mixin buildPseudo($registry) {
	// ::before
	@each $classname, $properties in $registry {
		.before\:#{$classname}::before {
			@each $property, $value in $properties {
				#{$property}: $value;
			}
		}
	}

	// ::after
	@each $classname, $properties in $registry {
		.after\:#{$classname}::after {
			@each $property, $value in $properties {
				#{$property}: $value;
			}
		}
	}
}

@function prefix($prefix, $map) {
	$map-new: ();
	@each $name, $value in $map {
		$map-new: map-merge(
			$map-new,
			(
				"#{$prefix}#{$name}": $value,
			)
		);
	}
	@return $map-new;
}

// -----------------------------------------------------------------------------
// Use a defined set of style(s) from the registry
@mixin apply($classlist) {
	// get the default registry
	$registry: map-get($registrySets, "default");

	// // fixed use of double spaces
	// $classlist: str-replace($classlist, "  ", " ");
	// $classlist: str-replace($classlist, "  ", " ");
	$classlist: str-to-list($classlist);

	$properties: ();
	// first collect properties to ensure no property duplication
	@each $classname in $classlist {
		$registry-item: map-get($registry, #{$classname});

		@if $registry-item != null {
			$properties: map-merge($properties, $registry-item);
		} @else {
			@warn "'#{$classname}' not found in registry";
		}
	}

	// build the property list
	@each $property-name, $property-value in $properties {
		#{$property-name}: $property-value;
	}
}
