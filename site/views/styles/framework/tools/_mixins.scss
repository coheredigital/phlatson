@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@mixin media($min: false, $max: false, $and: false, $feature: width, $type: all) {
    $min-width: 0;
    $max-width: 0;
    $query: ''; // FROM: this breakpoint (inclusive)
    @if $min {
        $min-width: map_get($breakpoints, $min);
    }
    // TO: that breakpoint (exclusive)
    @if $max {
        $max-width: map_get($breakpoints, $max) - 1px;
    }
    @if $feature {
        @if $min-width !=0 {
            $query: '#{$query} and (min-#{$feature}: #{$min-width})';
        }
        @if $max-width !=0 {
            $query: '#{$query} and (max-#{$feature}: #{$max-width})';
        }
    }
    @if $and {
        $query: '#{$query} and #{$and}';
    }
    // Remove unnecessary media query prefix 'all and '
    @if ($type=='all' and $query !='') {
        $type: '';
        $query: str-slice(unquote($query), 6);
    }
    @media #{$type + $query} {
        @content;
    }
}

@function color($name) {
    @if $name {
        @return map_get($colors, $name);
    }
}

@function contrast($color) {
    @if (lightness($color) > 50) {
        @return #000000; // Lighter backgorund, return dark color
    } @else {
        @return #ffffff; // Darker background, return light color
    }
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }

    // background-image: nth(nth($color-stops, 1), 1);
    // background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background-image: linear-gradient($direction, $color-stops);
}

@mixin linear-gradient-border($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    border-image: linear-gradient($direction, $color-stops);
}